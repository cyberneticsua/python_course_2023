#Замикання (closure) - це функція, яка запам'ятовує своє лексичне оточення навіть в тому випадку, якщо вона
#виконується поза своєю областю видимості
#Замикання містять 3 елементи:
#зовнішня функція - визначає певну область видимості і в якій визначені певні змінні та параметри (лексичне оточення)
#змінні та параметри (лексичне оточення), які визначені у зовнішній функції
#вкладена функція - яка використовує змінні та параметри зовнішньої функції
def outer():#зовнішня функція
    n = 5   #локальна змінна (лексичне оточення)
    def inner():#вкладена функція
        nonlocal n
        n+=1 #операції з лексичним оточенням
        print(n)
    return inner

fn = outer() #функція inner
fn()
fn()
fn()

#застосування параметрів
def multiply(n):
    def inner(m): return n*m
    return inner

fn = multiply(10)
print(fn(5))
print(fn(8))

fn = multiply(5)
print(fn(5))
print(fn(8))

#Декоратори - це функція, яка як параметр отримує іншу функцію і як результат теж повертає функцію. Декоратори дозволяють
#модифікувати виконувану функцію, значення її параметрів і її результат без зміни початкового коду цієї функції
def star(func):
    def inner():
        print('*'*30)
        func()
        print('*'*30)
    return inner

def sharp(func):
    def inner():
        print('#'*30)
        func()
        print('#'*30)
    return inner

@sharp
@star
def hello():
    print('Hello Cybernetics')

#Отримання параметрів функції в декораторі
def sharp(func):
    def inner(*args): #через *args отримуються значення параметрів оригінальної функції
        # name = args[0]
        # age = args[1]
        print('#'*30)
        func(*args)
        print('#'*30)
    return inner

@sharp
def hello(name, age):
    print(f'Hello {name} {age}')

hello('Igor', 22)